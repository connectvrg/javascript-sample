/// <reference types="node" />
import { AccURL } from "./acc-url";
import { Payload } from "./payload";
import { Signature, SignerInfo } from "./signer";
import { TxSigner } from "./tx-signer";
export declare type HeaderOptions = {
    timestamp?: number;
    memo?: string;
    metadata?: Uint8Array;
};
/**
 * Transaction header
 */
export declare class Header {
    private readonly _principal;
    private _initiator?;
    private readonly _memo?;
    private readonly _metadata?;
    private readonly _timestamp;
    /**
     * Construct a Transaction Header
     * @param principal principal of the transaction
     * @param options options.
     * - If timestamp is not specified it defaults to the current timestamp in microseconds.
     */
    constructor(principal: string | AccURL, options?: HeaderOptions);
    get principal(): AccURL;
    get timestamp(): number;
    get memo(): string | undefined;
    get metadata(): Buffer | undefined;
    computeInitiator(signerInfo: SignerInfo): Buffer;
    marshalBinary(): Buffer;
}
/**
 * An Accumulate Transaction
 */
export declare class Transaction {
    private readonly _header;
    private readonly _payloadBinary;
    private _signature?;
    private _hash?;
    private _bodyHash;
    constructor(payload: Payload, header: Header, signature?: Signature);
    /**
     * Compute the hash of the transaction
     */
    hash(): Buffer;
    /**
     * Data that needs to be signed in order to submit the transaction.
     */
    dataForSignature(signerInfo: SignerInfo): Buffer;
    get payload(): Uint8Array;
    get principal(): AccURL;
    get header(): Header;
    get signature(): Signature | undefined;
    set signature(signature: Signature | undefined);
    sign(signer: TxSigner): Promise<void>;
    /**
     * Convert the Transaction into the param object for the `execute` API method
     */
    toTxRequest(checkOnly?: boolean): TxRequest;
}
export declare type TxRequest = {
    checkOnly?: boolean;
    isEnvelope?: boolean;
    origin: string;
    signer: {
        url: string;
        version: number;
        publicKey: string;
        timestamp: number;
        signatureType?: string;
        useSimpleHash: boolean;
    };
    signature: string;
    txHash?: string;
    payload: string;
    memo?: string;
    metadata?: string;
};
