"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcClient = exports.RpcError = void 0;
const axios_1 = __importDefault(require("axios"));
class RpcError extends Error {
    constructor(err) {
        let message = err.message;
        if (err.data) {
            message += `: ${JSON.stringify(err.data, null, 4)}`;
        }
        super(message);
        this.code = err.code;
        this.data = err.data;
    }
}
exports.RpcError = RpcError;
class RpcClient {
    constructor(endpoint) {
        const httpCliOptions = {
            headers: { "Content-Type": "application/json" },
        };
        this._httpCli = axios_1.default.create(httpCliOptions);
        this._endpoint = endpoint;
        this._idCounter = 0;
    }
    call(method, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                jsonrpc: "2.0",
                id: this._idCounter++,
                method: method,
                params: params,
            };
            const { data: { error, result }, } = yield this._httpCli.post(this._endpoint, request);
            if (error) {
                return Promise.reject(new RpcError(error));
            }
            else {
                return result;
            }
        });
    }
}
exports.RpcClient = RpcClient;
//# sourceMappingURL=rpc-client.js.map