/// <reference types="node" />
import { TransactionType } from "../tx-types";
import { BasePayload } from "./base-payload";
export declare enum KeyPageOperationType {
    Update = 1,
    Remove = 2,
    Add = 3,
    SetThreshold = 4,
    UpdateAllowed = 5
}
export declare type AddKeyOperation = {
    type: KeyPageOperationType.Add;
    keyHash: string | Uint8Array;
};
export declare type RemoveKeyOperation = {
    type: KeyPageOperationType.Remove;
    keyHash: string | Uint8Array;
};
export declare type UpdateKeyOperation = {
    type: KeyPageOperationType.Update;
    oldKeyHash: string | Uint8Array;
    newKeyHash: string | Uint8Array;
};
export declare type SetThresholdKeyPageOperation = {
    type: KeyPageOperationType.SetThreshold;
    threshold: number;
};
export declare type UpdateAllowedKeyPageOperation = {
    type: KeyPageOperationType.UpdateAllowed;
    allow?: TransactionType[];
    deny?: TransactionType[];
};
export declare type KeyPageOperation = AddKeyOperation | RemoveKeyOperation | UpdateKeyOperation | SetThresholdKeyPageOperation | UpdateAllowedKeyPageOperation;
export declare class UpdateKeyPage extends BasePayload {
    private readonly _operations;
    constructor(operation: KeyPageOperation | KeyPageOperation[]);
    protected _marshalBinary(): Buffer;
}
