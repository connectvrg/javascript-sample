"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateKeyPage = exports.KeyPageOperationType = void 0;
const encoding_1 = require("../encoding");
const tx_types_1 = require("../tx-types");
const base_payload_1 = require("./base-payload");
var KeyPageOperationType;
(function (KeyPageOperationType) {
    KeyPageOperationType[KeyPageOperationType["Update"] = 1] = "Update";
    KeyPageOperationType[KeyPageOperationType["Remove"] = 2] = "Remove";
    KeyPageOperationType[KeyPageOperationType["Add"] = 3] = "Add";
    KeyPageOperationType[KeyPageOperationType["SetThreshold"] = 4] = "SetThreshold";
    KeyPageOperationType[KeyPageOperationType["UpdateAllowed"] = 5] = "UpdateAllowed";
})(KeyPageOperationType = exports.KeyPageOperationType || (exports.KeyPageOperationType = {}));
class UpdateKeyPage extends base_payload_1.BasePayload {
    constructor(operation) {
        super();
        if (Array.isArray(operation)) {
            this._operations = operation;
        }
        else {
            this._operations = [operation];
        }
    }
    _marshalBinary() {
        const forConcat = [];
        forConcat.push((0, encoding_1.uvarintMarshalBinary)(tx_types_1.TransactionType.UpdateKeyPage, 1));
        this._operations
            .map(marshalBinaryKeyPageOperation)
            .forEach((b) => forConcat.push((0, encoding_1.bytesMarshalBinary)(b, 2)));
        return Buffer.concat(forConcat);
    }
}
exports.UpdateKeyPage = UpdateKeyPage;
function marshalBinaryKeyPageOperation(operation) {
    switch (operation.type) {
        case KeyPageOperationType.Add:
        case KeyPageOperationType.Remove:
            return marshalBinaryAddRemoveKeyOperation(operation);
        case KeyPageOperationType.Update:
            return marshalBinaryUpdateKeyOperation(operation);
        case KeyPageOperationType.SetThreshold:
            return marshalBinarySetThresholdKeyPageOperation(operation);
        case KeyPageOperationType.UpdateAllowed:
            return marshalBinaryUpdateAllowedKeyPageOperation(operation);
    }
}
function marshalBinaryAddRemoveKeyOperation(operation) {
    const forConcat = [];
    forConcat.push((0, encoding_1.uvarintMarshalBinary)(operation.type, 1));
    const keyHash = getKeyHash(operation.keyHash);
    const entryMarshalBinary = (0, encoding_1.bytesMarshalBinary)(keyHash, 1);
    forConcat.push((0, encoding_1.bytesMarshalBinary)(entryMarshalBinary, 2));
    return Buffer.concat(forConcat);
}
function marshalBinaryUpdateKeyOperation(operation) {
    const forConcat = [];
    forConcat.push((0, encoding_1.uvarintMarshalBinary)(operation.type, 1));
    const oldKeyHash = getKeyHash(operation.oldKeyHash);
    const newKeyHash = getKeyHash(operation.newKeyHash);
    const oldEntryMarshalBinary = (0, encoding_1.bytesMarshalBinary)(oldKeyHash, 1);
    forConcat.push((0, encoding_1.bytesMarshalBinary)(oldEntryMarshalBinary, 2));
    const newEntryMarshalBinary = (0, encoding_1.bytesMarshalBinary)(newKeyHash, 1);
    forConcat.push((0, encoding_1.bytesMarshalBinary)(newEntryMarshalBinary, 3));
    return Buffer.concat(forConcat);
}
function marshalBinarySetThresholdKeyPageOperation(operation) {
    const forConcat = [];
    forConcat.push((0, encoding_1.uvarintMarshalBinary)(operation.type, 1));
    forConcat.push((0, encoding_1.uvarintMarshalBinary)(operation.threshold, 2));
    return Buffer.concat(forConcat);
}
function marshalBinaryUpdateAllowedKeyPageOperation(operation) {
    var _a, _b;
    const forConcat = [];
    forConcat.push((0, encoding_1.uvarintMarshalBinary)(operation.type, 1));
    (_a = operation === null || operation === void 0 ? void 0 : operation.allow) === null || _a === void 0 ? void 0 : _a.forEach((a) => forConcat.push((0, encoding_1.uvarintMarshalBinary)(a, 2)));
    (_b = operation === null || operation === void 0 ? void 0 : operation.deny) === null || _b === void 0 ? void 0 : _b.forEach((d) => forConcat.push((0, encoding_1.uvarintMarshalBinary)(d, 3)));
    return Buffer.concat(forConcat);
}
function getKeyHash(keyHash) {
    return keyHash instanceof Uint8Array ? keyHash : Buffer.from(keyHash, "hex");
}
//# sourceMappingURL=update-key-page.js.map