"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateToken = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
const __1 = require("..");
const acc_url_1 = require("../acc-url");
const encoding_1 = require("../encoding");
const tx_types_1 = require("../tx-types");
const base_payload_1 = require("./base-payload");
class CreateToken extends base_payload_1.BasePayload {
    constructor(arg) {
        var _a;
        super();
        this._url = acc_url_1.AccURL.toAccURL(arg.url);
        this._symbol = arg.symbol;
        this._precision = arg.precision;
        this._properties = arg.properties ? acc_url_1.AccURL.toAccURL(arg.properties) : undefined;
        this._supplyLimit = arg.supplyLimit ? new bn_js_1.default(arg.supplyLimit) : undefined;
        this._authorities = ((_a = arg === null || arg === void 0 ? void 0 : arg.authorities) === null || _a === void 0 ? void 0 : _a.map((a) => acc_url_1.AccURL.toAccURL(a))) || [];
    }
    _marshalBinary() {
        const forConcat = [];
        forConcat.push((0, encoding_1.uvarintMarshalBinary)(tx_types_1.TransactionType.CreateToken, 1));
        forConcat.push((0, encoding_1.stringMarshalBinary)(this._url.toString(), 2));
        if (this._symbol) {
            forConcat.push((0, encoding_1.stringMarshalBinary)(this._symbol, 4));
        }
        if (this._precision) {
            forConcat.push((0, encoding_1.uvarintMarshalBinary)(this._precision, 5));
        }
        if (this._properties) {
            forConcat.push((0, encoding_1.stringMarshalBinary)(this._properties.toString(), 6));
        }
        if (this._supplyLimit) {
            forConcat.push((0, __1.bigNumberMarshalBinary)(this._supplyLimit, 7));
        }
        if (this._authorities.length > 0) {
            this._authorities.forEach((a) => forConcat.push((0, encoding_1.stringMarshalBinary)(a.toString(), 9)));
        }
        return Buffer.concat(forConcat);
    }
}
exports.CreateToken = CreateToken;
//# sourceMappingURL=create-token.js.map