"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateAccountAuth = exports.AccountAuthOperationType = void 0;
const encoding_1 = require("../encoding");
const tx_types_1 = require("../tx-types");
const base_payload_1 = require("./base-payload");
var AccountAuthOperationType;
(function (AccountAuthOperationType) {
    AccountAuthOperationType[AccountAuthOperationType["Enable"] = 1] = "Enable";
    AccountAuthOperationType[AccountAuthOperationType["Disable"] = 2] = "Disable";
    AccountAuthOperationType[AccountAuthOperationType["AddAuthority"] = 3] = "AddAuthority";
    AccountAuthOperationType[AccountAuthOperationType["RemoveAuthority"] = 4] = "RemoveAuthority";
})(AccountAuthOperationType = exports.AccountAuthOperationType || (exports.AccountAuthOperationType = {}));
class UpdateAccountAuth extends base_payload_1.BasePayload {
    constructor(operation) {
        super();
        if (Array.isArray(operation)) {
            this._operations = operation;
        }
        else {
            this._operations = [operation];
        }
    }
    _marshalBinary() {
        const forConcat = [];
        forConcat.push((0, encoding_1.uvarintMarshalBinary)(tx_types_1.TransactionType.UpdateAccountAuth, 1));
        this._operations
            .map(marshalBinaryAccountAuthOperation)
            .forEach((b) => forConcat.push((0, encoding_1.bytesMarshalBinary)(b, 2)));
        return Buffer.concat(forConcat);
    }
}
exports.UpdateAccountAuth = UpdateAccountAuth;
function marshalBinaryAccountAuthOperation(operation) {
    const forConcat = [];
    forConcat.push((0, encoding_1.uvarintMarshalBinary)(operation.type, 1));
    forConcat.push((0, encoding_1.stringMarshalBinary)(operation.authority.toString(), 2));
    return Buffer.concat(forConcat);
}
//# sourceMappingURL=update-account-auth.js.map