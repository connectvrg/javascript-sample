"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionType = void 0;
var TransactionType;
(function (TransactionType) {
    /** CreateIdentity creates an ADI, which produces a synthetic chain. */
    TransactionType[TransactionType["CreateIdentity"] = 1] = "CreateIdentity";
    /** CreateTokenAccount creates an ADI token account, which produces a synthetic chain create transaction. */
    TransactionType[TransactionType["CreateTokenAccount"] = 2] = "CreateTokenAccount";
    /** SendTokens transfers tokens between token accounts, which produces a synthetic deposit tokens transaction. */
    TransactionType[TransactionType["SendTokens"] = 3] = "SendTokens";
    /** CreateDataAccount creates an ADI Data Account, which produces a synthetic chain create transaction. */
    TransactionType[TransactionType["CreateDataAccount"] = 4] = "CreateDataAccount";
    /** WriteData writes data to an ADI Data Account, which *does not* produce a synthetic transaction. */
    TransactionType[TransactionType["WriteData"] = 5] = "WriteData";
    /** WriteDataTo writes data to a Lite Data Account, which produces a synthetic write data transaction. */
    TransactionType[TransactionType["WriteDataTo"] = 6] = "WriteDataTo";
    /** AcmeFaucet produces a synthetic deposit tokens transaction that deposits ACME tokens into a lite token account. */
    TransactionType[TransactionType["AcmeFaucet"] = 7] = "AcmeFaucet";
    /** CreateToken creates a token issuer, which produces a synthetic chain create transaction. */
    TransactionType[TransactionType["CreateToken"] = 8] = "CreateToken";
    /** IssueTokens issues tokens to a token account, which produces a synthetic token deposit transaction. */
    TransactionType[TransactionType["IssueTokens"] = 9] = "IssueTokens";
    /** BurnTokens burns tokens from a token account, which produces a synthetic burn tokens transaction. */
    TransactionType[TransactionType["BurnTokens"] = 10] = "BurnTokens";
    /** CreateKeyPage creates a key page, which produces a synthetic chain create transaction. */
    TransactionType[TransactionType["CreateKeyPage"] = 12] = "CreateKeyPage";
    /** CreateKeyBook creates a key book, which produces a synthetic chain create transaction. */
    TransactionType[TransactionType["CreateKeyBook"] = 13] = "CreateKeyBook";
    /** AddCredits converts ACME tokens to credits, which produces a synthetic deposit credits transaction. */
    TransactionType[TransactionType["AddCredits"] = 14] = "AddCredits";
    /** UpdateKeyPage adds, removes, or updates keys in a key page, which *does not* produce a synthetic transaction. */
    TransactionType[TransactionType["UpdateKeyPage"] = 15] = "UpdateKeyPage";
    /** AddValidator add a validator. */
    TransactionType[TransactionType["AddValidator"] = 18] = "AddValidator";
    /** RemoveValidator remove a validator. */
    TransactionType[TransactionType["RemoveValidator"] = 19] = "RemoveValidator";
    /** UpdateValidatorKey update a validator key. */
    TransactionType[TransactionType["UpdateValidatorKey"] = 20] = "UpdateValidatorKey";
    /** UpdateAccountAuth updates authorization for an account. */
    TransactionType[TransactionType["UpdateAccountAuth"] = 21] = "UpdateAccountAuth";
    /** UpdateKey update key for existing keys. */
    TransactionType[TransactionType["UpdateKey"] = 22] = "UpdateKey";
})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));
//# sourceMappingURL=tx-types.js.map