"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxSigner = void 0;
const acc_url_1 = require("./acc-url");
/**
 * Class to sign Transactions using a Signer
 */
class TxSigner {
    constructor(url, signer, version) {
        this._url = acc_url_1.AccURL.toAccURL(url);
        this._signer = signer;
        this._version = version !== null && version !== void 0 ? version : 1;
    }
    /**
     * Helper to create a new instance of TxSigner with a new version
     * while copying other TxSigner attributes
     * @param signer original TxSigner
     * @param version new version
     * @returns
     */
    static withNewVersion(signer, version) {
        return new TxSigner(signer.info.url, signer.signer, version);
    }
    get signer() {
        return this._signer;
    }
    get url() {
        return this._url;
    }
    get publicKey() {
        return this._signer.publicKey;
    }
    get publicKeyHash() {
        return this._signer.publicKeyHash;
    }
    get version() {
        return this._version;
    }
    get info() {
        return {
            url: this.url,
            publicKey: this.publicKey,
            version: this.version,
            type: this._signer.type,
        };
    }
    toString() {
        return this._url.toString();
    }
    sign(tx) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                signerInfo: this.info,
                signature: yield this._signer.signRaw(tx.dataForSignature(this.info)),
            };
        });
    }
}
exports.TxSigner = TxSigner;
//# sourceMappingURL=tx-signer.js.map