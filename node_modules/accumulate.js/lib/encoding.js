"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashMarshalBinary = exports.bytesMarshalBinary = exports.stringMarshalBinary = exports.booleanMarshalBinary = exports.bigNumberMarshalBinary = exports.uvarintMarshalBinary = exports.fieldMarshalBinary = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
function fieldMarshalBinary(field, val) {
    if (field < 1 || field > 32) {
        throw new Error(`Field number is out of range [1, 32]: ${field}`);
    }
    return Buffer.concat([uvarintMarshalBinary(field), val]);
}
exports.fieldMarshalBinary = fieldMarshalBinary;
function uvarintMarshalBinary(val, field) {
    if (typeof val === "number" && val > Number.MAX_SAFE_INTEGER) {
        throw new Error("Cannot marshal binary number greater than MAX_SAFE_INTEGER. Use `BN` class instead.");
    }
    let x = new bn_js_1.default(val);
    const buffer = [];
    let i = 0;
    while (x.gte(new bn_js_1.default(0x80))) {
        buffer[i] = x.maskn(8).or(new bn_js_1.default(0x80)).toNumber();
        x = x.shrn(7);
        i++;
    }
    buffer[i] = x.maskn(8).toNumber();
    const data = Buffer.from(buffer);
    return field ? fieldMarshalBinary(field, data) : data;
}
exports.uvarintMarshalBinary = uvarintMarshalBinary;
function bigNumberMarshalBinary(bn, field) {
    const data = bytesMarshalBinary(bn.toArrayLike(Buffer, "be"));
    return withFieldNumber(data, field);
}
exports.bigNumberMarshalBinary = bigNumberMarshalBinary;
function booleanMarshalBinary(b, field) {
    const data = b ? Buffer.from([1]) : Buffer.from([0]);
    return withFieldNumber(data, field);
}
exports.booleanMarshalBinary = booleanMarshalBinary;
function stringMarshalBinary(val, field) {
    const data = bytesMarshalBinary(Buffer.from(val));
    return withFieldNumber(data, field);
}
exports.stringMarshalBinary = stringMarshalBinary;
function bytesMarshalBinary(val, field) {
    const length = uvarintMarshalBinary(val.length);
    const data = Buffer.concat([length, val]);
    return withFieldNumber(data, field);
}
exports.bytesMarshalBinary = bytesMarshalBinary;
function hashMarshalBinary(val, field) {
    if (val.length != 32) {
        throw new Error(`Invalid length, value is not a hash`);
    }
    const data = Buffer.from(val);
    return withFieldNumber(data, field);
}
exports.hashMarshalBinary = hashMarshalBinary;
function withFieldNumber(data, field) {
    return field ? fieldMarshalBinary(field, data) : data;
}
//# sourceMappingURL=encoding.js.map