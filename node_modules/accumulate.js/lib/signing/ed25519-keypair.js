"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ed25519Keypair = void 0;
const tweetnacl_1 = __importDefault(require("tweetnacl"));
/**
 * An Ed25519 keypair used for signing transactions.
 */
class Ed25519Keypair {
    /**
     * Create a new keypair instance.
     * Generate random keypair if no {@link Keypair} is provided.
     *
     * @param keypair ed25519 keypair
     */
    constructor(keypair) {
        if (keypair) {
            this._keypair = keypair;
        }
        else {
            this._keypair = tweetnacl_1.default.sign.keyPair();
        }
    }
    /**
     * Generate a new random keypair
     */
    static generate() {
        return new Ed25519Keypair(tweetnacl_1.default.sign.keyPair());
    }
    /**
     * Create a keypair from a raw secret key byte array.
     *
     * This method should only be used to recreate a keypair from a previously
     * generated secret key. Generating keypairs from a random seed should be done
     * with the {@link Ed25519Keypair.fromSeed} method.
     *
     * @throws error if the provided secret key is invalid and validation is not skipped.
     *
     * @param secretKey secret key byte array
     * @param options: skip secret key validation
     */
    static fromSecretKey(secretKey, options) {
        const keypair = tweetnacl_1.default.sign.keyPair.fromSecretKey(secretKey);
        if (!options || !options.skipValidation) {
            const encoder = new TextEncoder();
            const signData = encoder.encode("@accumulate/accumulate.js-validation-v1");
            const signature = tweetnacl_1.default.sign.detached(signData, keypair.secretKey);
            if (!tweetnacl_1.default.sign.detached.verify(signData, signature, keypair.publicKey)) {
                throw new Error("provided secretKey is invalid");
            }
        }
        return new Ed25519Keypair(keypair);
    }
    /**
     * Generate a keypair from a 32 byte seed.
     *
     * @param seed seed byte array
     */
    static fromSeed(seed) {
        return new Ed25519Keypair(tweetnacl_1.default.sign.keyPair.fromSeed(seed));
    }
    /**
     * The raw public key for this keypair
     */
    get publicKey() {
        return this._keypair.publicKey;
    }
    /**
     * The raw secret key for this keypair
     */
    get secretKey() {
        return this._keypair.secretKey;
    }
}
exports.Ed25519Keypair = Ed25519Keypair;
//# sourceMappingURL=ed25519-keypair.js.map