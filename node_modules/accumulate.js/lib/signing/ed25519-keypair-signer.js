"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ed25519KeypairSigner = void 0;
const tweetnacl_1 = __importDefault(require("tweetnacl"));
const crypto_1 = require("../crypto");
const signer_1 = require("../signer");
const ed25519_keypair_1 = require("./ed25519-keypair");
class Ed25519KeypairSigner {
    constructor(keypair) {
        this._keypair = keypair;
    }
    get type() {
        return signer_1.SignatureType.SignatureTypeED25519;
    }
    static generate() {
        return new Ed25519KeypairSigner(new ed25519_keypair_1.Ed25519Keypair());
    }
    signRaw(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return tweetnacl_1.default.sign.detached(data, this._keypair.secretKey);
        });
    }
    get publicKey() {
        return this._keypair.publicKey;
    }
    get publicKeyHash() {
        return (0, crypto_1.sha256)(this._keypair.publicKey);
    }
}
exports.Ed25519KeypairSigner = Ed25519KeypairSigner;
//# sourceMappingURL=ed25519-keypair-signer.js.map