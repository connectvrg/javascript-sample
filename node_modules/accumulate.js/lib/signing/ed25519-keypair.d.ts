export declare type Keypair = {
    publicKey: Uint8Array;
    secretKey: Uint8Array;
};
/**
 * An Ed25519 keypair used for signing transactions.
 */
export declare class Ed25519Keypair {
    private readonly _keypair;
    /**
     * Create a new keypair instance.
     * Generate random keypair if no {@link Keypair} is provided.
     *
     * @param keypair ed25519 keypair
     */
    constructor(keypair?: Keypair);
    /**
     * Generate a new random keypair
     */
    static generate(): Ed25519Keypair;
    /**
     * Create a keypair from a raw secret key byte array.
     *
     * This method should only be used to recreate a keypair from a previously
     * generated secret key. Generating keypairs from a random seed should be done
     * with the {@link Ed25519Keypair.fromSeed} method.
     *
     * @throws error if the provided secret key is invalid and validation is not skipped.
     *
     * @param secretKey secret key byte array
     * @param options: skip secret key validation
     */
    static fromSecretKey(secretKey: Uint8Array, options?: {
        skipValidation?: boolean;
    }): Ed25519Keypair;
    /**
     * Generate a keypair from a 32 byte seed.
     *
     * @param seed seed byte array
     */
    static fromSeed(seed: Uint8Array): Ed25519Keypair;
    /**
     * The raw public key for this keypair
     */
    get publicKey(): Uint8Array;
    /**
     * The raw secret key for this keypair
     */
    get secretKey(): Uint8Array;
}
