import { AccURL } from "./acc-url";
import { MinorBlocksQueryOptions, QueryOptions, QueryPagination, TxQueryOptions, WaitTxOptions } from "./api-types";
import { AddCreditsArg } from "./payload/add-credits";
import { AddValidatorArg } from "./payload/add-validator";
import { BurnTokensArg } from "./payload/burn-tokens";
import { CreateDataAccountArg } from "./payload/create-data-account";
import { CreateIdentityArg } from "./payload/create-identity";
import { CreateKeyBookArg } from "./payload/create-key-book";
import { CreateKeyPageArg } from "./payload/create-key-page";
import { CreateTokenArg } from "./payload/create-token";
import { CreateTokenAccountArg } from "./payload/create-token-account";
import { IssueTokensArg } from "./payload/issue-tokens";
import { RemoveValidatorArg } from "./payload/remove-validator";
import { SendTokensArg } from "./payload/send-tokens";
import { AccountAuthOperation } from "./payload/update-account-auth";
import { UpdateKeyArg } from "./payload/update-key";
import { KeyPageOperation } from "./payload/update-key-page";
import { UpdateValidatorKeyArg } from "./payload/update-validator-key";
import { WriteDataArg } from "./payload/write-data";
import { Transaction } from "./transaction";
import { TxSigner } from "./tx-signer";
/**
 * Client to call Accumulate RPC APIs.
 */
export declare class Client {
    private readonly _rpcClient;
    constructor(endpoint: string);
    /**
     * Direct RPC call.
     * @param method RPC method
     * @param params method parameters
     */
    call<T>(method: string, params?: any): Promise<T>;
    /******************
     * Queries
     ******************/
    queryAcmeOracle(): Promise<number>;
    queryUrl(url: string | AccURL, options?: QueryOptions): Promise<any>;
    queryTx(txId: string, options?: TxQueryOptions): Promise<any>;
    queryTxHistory(url: string | AccURL, pagination: QueryPagination): Promise<any>;
    queryDirectory(url: string | AccURL, pagination: QueryPagination, options?: QueryOptions): Promise<any>;
    queryData(url: string | AccURL, entryHash?: string): Promise<any>;
    queryDataSet(url: string | AccURL, pagination: QueryPagination, options?: QueryOptions): Promise<any>;
    queryKeyPageIndex(url: string | AccURL, key: string | Uint8Array): Promise<any>;
    queryMinorBlocks(url: string | AccURL, pagination: QueryPagination, options?: MinorBlocksQueryOptions): Promise<any>;
    querySignerVersion(signer: TxSigner | AccURL, publicKeyHash?: Uint8Array): Promise<number>;
    /**
     * Wait for a transaction (and its associated synthetic tx ids) to be delivered.
     * Throw an error if the transaction has failed or the timeout is exhausted.
     * @param txId
     * @param options
     * @returns void
     */
    waitOnTx(txId: string, options?: WaitTxOptions): Promise<void>;
    /******************
     * Transactions
     ******************/
    addCredits(principal: AccURL | string, addCredits: AddCreditsArg, signer: TxSigner): Promise<any>;
    addValidator(principal: AccURL | string, addValidator: AddValidatorArg, signer: TxSigner): Promise<any>;
    burnTokens(principal: AccURL | string, burnTokens: BurnTokensArg, signer: TxSigner): Promise<any>;
    createDataAccount(principal: AccURL | string, createDataAccount: CreateDataAccountArg, signer: TxSigner): Promise<any>;
    createIdentity(principal: AccURL | string, createIdentity: CreateIdentityArg, signer: TxSigner): Promise<any>;
    createKeyBook(principal: AccURL | string, createKeyBook: CreateKeyBookArg, signer: TxSigner): Promise<any>;
    createKeyPage(principal: AccURL | string, createKeyPage: CreateKeyPageArg, signer: TxSigner): Promise<any>;
    createToken(principal: AccURL | string, createToken: CreateTokenArg, signer: TxSigner): Promise<any>;
    createTokenAccount(principal: AccURL | string, createTokenAccount: CreateTokenAccountArg, signer: TxSigner): Promise<any>;
    execute(tx: Transaction): Promise<any>;
    issueTokens(principal: AccURL | string, issueTokens: IssueTokensArg, signer: TxSigner): Promise<any>;
    removeValidator(principal: AccURL | string, removeValidator: RemoveValidatorArg, signer: TxSigner): Promise<any>;
    sendTokens(principal: AccURL | string, sendTokens: SendTokensArg, signer: TxSigner): Promise<any>;
    updateAccountAuth(principal: AccURL | string, operation: AccountAuthOperation | AccountAuthOperation[], signer: TxSigner): Promise<any>;
    updateKey(principal: AccURL | string, updateKey: UpdateKeyArg, signer: TxSigner): Promise<any>;
    updateKeyPage(principal: AccURL | string, operation: KeyPageOperation | KeyPageOperation[], signer: TxSigner): Promise<any>;
    updateValidatorKey(principal: AccURL | string, updateValidatorKey: UpdateValidatorKeyArg, signer: TxSigner): Promise<any>;
    writeData(principal: AccURL | string, writeData: WriteDataArg, signer: TxSigner): Promise<any>;
    private _execute;
    /******************
     * Others
     ******************/
    faucet(url: AccURL): Promise<any>;
    status(): Promise<any>;
    version(): Promise<any>;
    describe(): Promise<any>;
    metrics(metric: string, duration: number): Promise<any>;
}
